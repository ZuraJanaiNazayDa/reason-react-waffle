// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Enzyme = require("bs-enzyme/src/Enzyme.js");
var Waffle = require("reason-waffle/src/Waffle.bs.js");
var Enzyme$1 = require("enzyme");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Caml_oo_curry = require("bs-platform/lib/js/caml_oo_curry.js");
var ReasonReactWaffle = require("../src/ReasonReactWaffle.bs.js");
var EnzymeAdapterReact = require("enzyme-adapter-react-16");

Enzyme.configureEnzyme(new EnzymeAdapterReact());

describe("Consumer", (function () {
        var reducer = function (_, action) {
          return action[0];
        };
        var stateStream = Waffle.scan(reducer, 0);
        var C = /* module */[
          /* name */"number",
          /* stream */stateStream
        ];
        var Num = ReasonReactWaffle.CreateConsumer(C);
        var receivedValue = [-1];
        var consumer = Enzyme$1.shallow(ReasonReact.element(/* None */0, /* None */0, Curry._1(Num[/* Consumer */3][/* make */1], (function (value, send) {
                        receivedValue[0] = value;
                        if (value === 2) {
                          Curry._1(send, /* Set */[3]);
                        }
                        return null;
                      }))));
        Jest.test("renders", (function () {
                return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](consumer.exists()));
              }));
        Jest.test("receives the value", (function () {
                return Jest.Expect[/* toBe */2](0, Jest.Expect[/* expect */0](receivedValue[0]));
              }));
        Jest.test("updates the value", (function () {
                Caml_oo_curry.js2(-899906020, 1, stateStream, /* Set */[1]);
                return Jest.Expect[/* toBe */2](1, Jest.Expect[/* expect */0](receivedValue[0]));
              }));
        return Jest.test("can send actions", (function () {
                      Caml_oo_curry.js2(-899906020, 2, stateStream, /* Set */[2]);
                      return Jest.Expect[/* toEqual */12](/* Some */[3], Jest.Expect[/* expect */0](Caml_oo_curry.js2(-900406885, 3, stateStream, /* () */0)));
                    }));
      }));

/*  Not a pure module */
